桥接模式（Bridge Pattern）

桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。
它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interfce)模式。


桥我们大家都熟悉，顾名思义就是用来将河的两岸联系起来的。
而此处的桥是用来将两个独立的结构联系起来，
而这两个被联系起来的结构可以独立的变化，所有其他的理解只要建立在这个层面上就会比较容易。


官方说明:
如果一个系统需要在抽象化和具体化之间增加更多的灵活性
避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系。

“抽象部分”和“实现部分”可以以继承的方式独立扩展而互不影响
在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合
即系统需要对抽象化角色和实现化角色进行动态耦合。

一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展。
对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。


桥梁模式所涉及的角色有：

1、抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。

2、修正抽象化(RefinedAbstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。

3、实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。
    必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。
    实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。

4、具体实现化(ConcreteImplementor)角色：这个角色给出实现化角色接口的具体实现。


优缺点
优点：

分离抽象接口及其实现部分。桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自维度的变化，也就是说抽象和实现不再在同一个继承层次结构中，而是“子类化”它们，使它们各自都具有自己的子类，以便任何组合子类，从而获得多维度组合对象。
在很多情况下，桥接模式可以取代多层继承方案，多层继承方案违背了“单一职责原则”，复用性较差，且类的个数非常多，桥接模式是比多层继承方案更好的解决方法，它极大减少了子类的个数。
桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，符合“开闭原则”。
缺点：

桥接模式的使用会增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程。
桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性，如何正确识别两个独立维度也需要一定的经验积累。

构建者模式(Builder Pattern)

旨在创建一个属性不可变的实例

1. @Builder注解的bug

    当我们只用@Builder注解时
    lombok为当前类生成的构造器是“default”的(不添加权限修饰符，默认为“default”的)。可以被同package的类调用(default限制不同package类的调用)

    我们之所以用构建器模式，是希望用户用构建器提供的方法去创建实例。
    所以，我们需要将此构造器设为private的。
    这时就需要用到“@AllArgsConstructor(access = AccessLevel.PRIVATE)”

2. 为什么使用构建器模式

    若一个类具有大量的成员变量，我们就需要提供一个全参的构造器或大量的set方法。
    这让实例的创建和赋值，变得很麻烦，且不直观。

    我们通过构建器，可以让变量的赋值变成链式调用，
    而且调用的方法名对应着成员变量的名称。让对象的创建和赋值都变得很简洁、直观。

3. 链式方法赋值，一定要用构建器模式吗？

    不一定要用到构建器模式，之所以使用构建器模式，是因为我们要创造的对象是一个成员变量不可变的对象。

    类的成员变量都由final修饰，因为需要在实例创建时就把值确定下来。
    但在类具有大量成员变量的时候，我们是不希望用户直接调用全参构造器的。

    所以我们使用了构建器中间类。这个类为了实现链式赋值，才将变量设为非final的。
    无论构建器实例怎么赋值，怎么改变，当你调用build方法时，就会返回一个成员变量不可变的基础类实例。

4. 那如果有大量属性，但不需要它是成员变量不可变的对象，我们还需要构建器模式吗？

    不需要，我们可以参考构建器，把代码赋值改成链式的即可
